#!/usr/bin/env run-cargo-script

use std::env;
use std::fs;
use std::process::Command;
use std::str;

fn main() -> std::io::Result<()> {
    let output = bash("command -v fish");

    let fish_path = str::from_utf8(&output.stdout).unwrap();
    let shell_file = fs::read_to_string("/etc/shells")?;
    let available_shells = shell_file
        .lines()
        .into_iter()
        .map(|x| x.trim())
        .filter(|x| x.len() > 0)
        .filter(|x| "#" != format!("{}", x.chars().next().unwrap()))
        .collect::<Vec<&str>>();
    let fish_shell_available = available_shells
        .into_iter()
        .filter(|x| x == &fish_path.trim())
        .count()
        > 0;

    if !fish_shell_available {
        bash(&"echo | sudo gtee -a /etc/shells");
        bash(&format!(
            "echo \"{}\" | sudo gtee -a /etc/shells",
            fish_path.trim()
        ));
    }

    let current_shell = env!("SHELL");
    let user = env!("USER");

    if current_shell != fish_path.trim() {
        bash(&format!(
            "sudo chsh -s \"{}\" \"{}\"",
            fish_path.trim(),
            user
        ));
    }

    Ok(())
}

fn bash(cmd: &str) -> std::process::Output {
    return Command::new("bash")
        .arg("-c")
        .arg(cmd)
        .output()
        .expect(&format!("failed to execute: {}", cmd));
}
